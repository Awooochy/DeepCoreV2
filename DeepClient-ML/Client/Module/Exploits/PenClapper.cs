using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MelonLoader;
using UnityEngine;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
    internal class PenClapper
    {
        public static bool PenClap = false;
        public static List<string> PenNames = new List<string>
        {
            "pen",
            "marker",
            "grip"
        };
        public static void State(bool S)
        {
            if (S)
            {
                PenClap = true;
                MelonCoroutines.Start(PenCrash());
            }
            else
            {
                PenClap = false;
            }
        }
        public static IEnumerator PenCrash()
        {
            for (; ; )
            {
                if (PenClap)
                {
                    yield return new WaitForSeconds(1f);
                    try
                    {
                        List<VRC_Pickup> list = OnLoadedScaneManager.allBaseUdonItem.ToList<VRC_Pickup>();
                        if (list != null)
                        {
                            foreach (VRC_Pickup vrc_Pickup in list)
                            {
                                foreach (string value in PenNames)
                                {
                                    if (vrc_Pickup.name.ToLower().Contains(value) && !vrc_Pickup.transform.parent.name.ToLower().Contains("eraser"))
                                    {
                                        for (int i = 0; i < 60; i++)
                                        {
                                            VRC_Trigger component = vrc_Pickup.gameObject.GetComponent<VRC_Trigger>();
                                            VRC_Trigger component2 = vrc_Pickup.gameObject.GetComponent<VRC_Trigger>();
                                            vrc_Pickup.Drop();
                                            if (component != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnDrop();
                                            }
                                            if (component2 != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnDrop();
                                            }
                                            if (component != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickup();
                                            }
                                            if (component2 != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickup();
                                            }
                                            if (component != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickupUseDown();
                                            }
                                            if (component2 != null)
                                            {
                                                vrc_Pickup.gameObject.GetComponent<VRC_Trigger>().OnPickupUseDown();
                                            }
                                            vrc_Pickup.transform.position = new Vector3(2.1474836E+09f, 2.1474836E+09f, 2.1474836E+09f) * 268f;
                                            vrc_Pickup.transform.position = new Vector3(-2.1474836E+09f, -2.1474836E+09f, -2.1474836E+09f) * 268f;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (System.Exception e)
                    {
                        DeepConsole.E(e);
                    }
                }
                yield return new WaitForEndOfFrame();
            }
            yield break;
        }
    }
}
