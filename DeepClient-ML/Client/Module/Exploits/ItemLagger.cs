using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MelonLoader;
using Mono.CSharp;
using UnityEngine;
using VRC;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
    internal class ItemLagger
    {
        public static float elapsedTime = 0.0f;
        public static float lagInterval = 0.1f;
        public static bool IsEnabled = false;
        public static bool bool_7;
        public static List<VRC_Pickup> pickups = new List<VRC_Pickup>();
        public static void State(bool s)
        {
            if (s)
            {
                pickups = OnLoadedScaneManager.allBaseUdonItem.ToList();
                ToggleColliders(true);
                IsEnabled = true;
            }
            else
            {
                ToggleColliders(false);
                IsEnabled= false;
                pickups.Clear();
            }
        }
        public static void OnUpdate()
        {
            if (IsEnabled)
            {
                elapsedTime += Time.deltaTime;

                if (elapsedTime <= lagInterval)
                {
                    MovePickups(new Vector3(0, 3.402823E+37f, 2));
                }
                else if (elapsedTime <= lagInterval * 2.0f)
                {
                    MovePickups(Networking.LocalPlayer.gameObject.transform.forward * 2.0f);
                }
                else
                {
                    elapsedTime = 0.0f;
                }
            }
        }
        public static void ToggleColliders(bool isEnabled)
        {
            if (pickups == null || pickups.Count == 0 || !IsEnabled) return;

            foreach (var pickup in pickups)
            {
                if (pickup == null)
                {
                    pickups.Clear();
                    return;
                }
                var collider = pickup?.GetComponent<Collider>();
                if (collider != null)
                {
                    collider.enabled = isEnabled;
                }
            }
        }
        public static void MovePickups(Vector3 offset)
        {
            if (pickups == null || pickups.Count == 0 || !IsEnabled) return;

            var localPlayerPosition = Networking.LocalPlayer.gameObject.transform.position;
            var targetPosition = localPlayerPosition + offset;

            foreach (var pickup in pickups)
            {
                if (pickup == null)
                {
                    pickups.Clear();
                    return;
                }

                Networking.LocalPlayer.TakeOwnership(pickup.gameObject);
                pickup.transform.position = targetPosition;
            }
        }
        public static VRC_Pickup[] GetAllPickups()
        {
            IEnumerable<VRC_Pickup> enumerable = from x in OnLoadedScaneManager.allBaseUdonItem
                                                 where x.name != "PhotoCamera" && x.name != "AvatarDebugConsole" && x.name != "OscDebugConsole" && x.name != "DebugConsole" && x.name != "ViewFinder" && x.name != "MirrorPickup"
                                                 select x;
            if (enumerable == null)
            {
                return null;
            }
            return enumerable.ToArray<VRC_Pickup>();
        }

        public static void CallapseState(bool s)
        {
            if (s)
            {
                var a = ReMod.Core.VRChat.PlayerExtensions.GetVRCPlayer();
                MelonCoroutines.Start(Collapse(a));
            }
            else 
            { 
                bool_7 = false;
            }
        }
        public static IEnumerator Collapse(VRCPlayer player)
        {
            bool_7 = true;
            IEnumerable<VRC_Pickup> pickups = from x in GetAllPickups()
                                              where (x.GetComponent<Collider>() != null && x.GetComponent<Collider>().enabled) || (x.GetComponentInChildren<Collider>() != null && x.GetComponentInChildren<Collider>().enabled)
                                              select x;
            while (bool_7 && player != null)
            {
                int num2;
                for (int i = 0; i < 20; i = num2 + 1)
                {
                    foreach (VRC_Pickup vrc_Pickup in pickups)
                    {
                        float num = (float)(i - 1) * 0.05f;
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                        vrc_Pickup.transform.position = player.transform.position + new Vector3(0f, -0.1f + num, 0f);
                        vrc_Pickup.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
                    }
                    yield return new WaitForEndOfFrame();
                    num2 = i;
                }
                yield return new WaitForSeconds(0.1f);
                foreach (VRC_Pickup vrc_Pickup2 in pickups)
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
                    vrc_Pickup2.transform.position = API.Struct0.Vector3_0;
                    vrc_Pickup2.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
                }
                yield return new WaitForSeconds(0.1f);
            }
            bool_7 = false;
            yield break;
        }
    }
}