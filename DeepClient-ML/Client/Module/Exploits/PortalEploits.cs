using System;
using DeepCore.Client.Misc;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;
using VRC.UI.Elements.Controls;

namespace DeepCore.Client.Module.Exploits
{
    internal class PortalEploits
    {
        public static void DestroyPortals()
        {
            foreach (PortalInternal portalInternal in GameObject.FindObjectsOfType<PortalInternal>())
            {
                bool flag = portalInternal.field_Private_Int32_0 != -1;
                if (flag)
                {
                    GameObject.DestroyImmediate(portalInternal.gameObject);
                }
            }
        }
        public static void DestroyPortalsV2(bool log)
        {
            PortalInternal[] array = Resources.FindObjectsOfTypeAll<PortalInternal>();
            int num = 0;
            for (int i = 0; i < array.Length; i++)
            {
                bool flag = !(array[i] == null);
                if (flag)
                {
                    TextMeshProUGUIEx componentInChildren = array[i].GetComponentInChildren<TextMeshProUGUIEx>();
                    bool flag2 = (componentInChildren.text.Contains("public") || componentInChildren.text.Contains("invite") || componentInChildren.text.Contains("friends")) && !componentInChildren.text.Contains(APIUser.CurrentUser.displayName);
                    if (flag2)
                    {
                        Networking.Destroy(array[i].gameObject);
                        num++;
                    }
                }
            }
            if (log)
            {
                bool flag3 = num == 1;
                if (flag3)
                {
                    DeepConsole.Log("Portals", string.Format("Deleted {0} portal", num));
                }
                else
                {
                    bool flag4 = num > 1;
                    if (flag4)
                    {
                        DeepConsole.Log("Portals", string.Format("Deleted {0} portal", num));
                    }
                }
            }
        }
        public static void DropPortalTid()
        {
            Misc.PopupHelper.PopupCall("World ID", "", "Ok", false, userInput =>
            {
                if (string.IsNullOrWhiteSpace(userInput) || !userInput.Contains(":"))
                {
                    Debug.LogError("Invalid World ID format. Expected format: worldId:instanceId");
                    return;
                }
                string[] parts = userInput.Split(':');
                if (parts.Length < 2)
                {
                    Debug.LogError("Invalid World ID format.");
                    return;
                }
                string worldId = parts[0];
                string instanceId = parts[1];
                ApiWorldInstance apiWorldInstance = new ApiWorldInstance
                {
                    id = userInput,
                    instanceId = instanceId,
                    worldId = worldId,
                    world = new ApiWorld { id = worldId }
                };
                Action<ApiContainer> value = container =>
                {
                    var modelContainer = new ApiModelContainer<ApiWorldInstance>();
                    modelContainer.setFromContainer(container);
                    if (container.Model is ApiWorldInstance worldInstance)
                    {
                        Vector3 spawnPosition = Networking.LocalPlayer.gameObject.transform.position + Vector3.forward * 1.505f;
                        PhotonUtil.RaisePortalCreate(worldInstance.shortName, spawnPosition, 0f);
                    }
                    else
                    {
                        Debug.LogError("Failed to cast model container.");
                    }
                };
                apiWorldInstance.Fetch(value, null, null, false, (UpdateDelegator.JobPriority)2);
            });
        }
    }
}