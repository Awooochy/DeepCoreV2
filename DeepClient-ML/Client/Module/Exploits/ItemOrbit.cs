using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MelonLoader;
using UnityEngine;
using VRC.SDKBase;

namespace DeepCore.Client.Module.Exploits
{
    internal class ItemOrbit
    {
        public static List<VRC_Pickup> items = new List<VRC_Pickup>();
        public static VRCPlayer player;
        public static float radius = 0.5f;
        public static float speed = 3f;
        public static bool isOrbiting = false;

        public static void State(bool s)
        {
            if (s)
            {
                isOrbiting = true;
                items = OnLoadedScaneManager.allBaseUdonItem.ToList();
                player = ReMod.Core.VRChat.PlayerExtensions.GetVRCPlayer();
                MelonCoroutines.Start(OrbitItem());
            }
            else
            {
                isOrbiting = false;
            }
        }
        public static IEnumerator OrbitItem()
        {
            float angle = 0f;
            while (isOrbiting)
            {
                if (player == null || items.Count == 0)
                {
                    MelonLogger.Error("ItemOrbit: Player or items became null.");
                    yield break;
                }
                angle += speed * Time.deltaTime;
                float itemSpacing = (2f * (float)System.Math.PI) / items.Count;
                for (int i = 0; i < items.Count; i++)
                {
                    VRC_Pickup item = items[i];
                    if (item == null || item.transform == null) continue;
                    if (!Networking.IsOwner(item.gameObject))
                    {
                        Networking.SetOwner(Networking.LocalPlayer, item.gameObject);
                        yield return new WaitForSeconds(0.05f);
                    }
                    Vector3 playerPos = player.transform.position;
                    float itemAngle = angle + (i * itemSpacing);
                    float x = playerPos.x + Mathf.Cos(itemAngle) * radius;
                    float z = playerPos.z + Mathf.Sin(itemAngle) * radius;
                    float y = playerPos.y + 1.5f;
                    item.transform.position = new Vector3(x, y, z);
                    item.transform.LookAt(player.transform.position + Vector3.up * 1.5f);
                }
                yield return null;
            }
        }
    }
}
