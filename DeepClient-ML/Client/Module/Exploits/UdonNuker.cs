using System.Collections;
using MelonLoader;
using UnityEngine;
using VRC.Udon;

namespace DeepCore.Client.Module.Exploits
{
    internal class UdonNuker
    {
        public static int EventCounter = 0;
        public static bool IsNuking = false;
        
        public static IEnumerator NukeAllUdonEvents()
        {
            foreach (var udonBehaviour in OnLoadedScaneManager.udonBehaviours)
            {
                foreach (var eventEntry in udonBehaviour._eventTable)
                {
                    udonBehaviour.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, eventEntry.key);
                    EventCounter++;
                }
            }
            
            DeepConsole.Log("UD", $"Triggered {EventCounter} Udon events.");
            EventCounter = 0;
            yield break;
        }

        public static void SetNukeState(bool enable)
        {
            if (enable)
            {
                IsNuking = true;
                MelonCoroutines.Start(MonitorEscapeKey());
                MelonCoroutines.Start(ContinuousUdonNuke());
            }
            else
            {
                IsNuking = false;
            }
        }

        public static IEnumerator MonitorEscapeKey()
        {
            while (true)
            {
                if (Input.GetKeyDown(KeyCode.Escape))
                {
                    IsNuking = false;
                    yield break;
                }
                yield return null;
            }
        }

        public static IEnumerator ContinuousUdonNuke()
        {
            while (IsNuking)
            {
                foreach (UdonBehaviour udonBehaviour in OnLoadedScaneManager.udonBehaviours)
                {
                    var eventEnumerator = udonBehaviour._eventTable.GetEnumerator();
                    
                    while (eventEnumerator.MoveNext())
                    {
                        var currentEvent = eventEnumerator.Current;
                        udonBehaviour.SendCustomNetworkEvent(
                            VRC.Udon.Common.Interfaces.NetworkEventTarget.All, 
                            currentEvent.Key
                        );
                    }
                    
                    if (!IsNuking)
                        break;
                        
                    yield return new WaitForSeconds(0.1f);
                }
                yield return new WaitForSeconds(0.1f);
            }
            yield break;
        }
    }
}